//
// UK Crown Copyright (c) 2019. All rights reserved.
//

public service Relationships::Left_Many.Create_Relationships (Test : in  integer) is
#-------------------------------------------------------------------#
#
# Create relationships
#
# The architecture shall support the creation of a new object 
# instance at application start or and during execution
# 1241-0000-01-0101
#
# A mapping shall be provided for the ASL create statment, including 
# the extension which allows some or all atributes to be specified
# 1241-0000-01-0102
#
# The architecture shall provide a mechanism to allow creation of a 
# simple relationship link between two object instances
# 1241-0000-01-0603
#
# The architectureshall support a translation of the ASL link 
# statement to map to the mechanism that allows creation of a 
# relationship link between two object instances
# 1241-0000-01-1202
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

[] = RPT1:Start_Test[Test, "1241-0000-01-0603", "Relationships", "objLM", "Create relationships"]
[] = RPT8:Specify_Requid[Test,"1241-0000-01-1202"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0611"]
[] = RPT8:Specify_Requid [Test, "1103-0000-01-0612"]

Has_Failed = TRUE

# Find the desired instances for Left Many Object
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM    = find-one Right_Many where idRM = 1
secondRM   = find-one Right_Many where idRM = 2
thirdRM    = find-one Right_Many where idRM = 3
tenthRM    = find-one Right_Many where idRM = 10
eleventhRM = find-one Right_Many where idRM = 11
twelthRM   = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Many Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

# Create associative Mc:Mc relationships
link firstLM  R15 firstRM  using secondAssoc
link firstLM  R15 thirdRM  using thirdAssoc
link secondLM R15 secondRM using fifthAssoc
link thirdLM  R15 firstRM  using fourthAssoc

link tenthLM    R15 tenthRM    using tenthAssoc
link tenthLM    R15 eleventhRM using eleventhAssoc
link tenthLM    R15 twelthRM   using twelthAssoc
link eleventhLM R15 eleventhRM using eighthAssoc
link twelthLM   R15 eleventhRM using ninthAssoc

# Create normal 1:Mc relationships
link secondAssoc R16 firstBM
link thirdAssoc  R16 firstBM
link thirdAssoc  R16 fifthBM
link fourthAssoc R16 firstBM
link fourthAssoc R16 thirdBM
link fifthAssoc  R16 fourthBM
link tenthAssoc  R16 tenthBM

# Create a couple of instances to prove the relationships
# For coding purposes, it is necessary to overspecify
# the relationship.

{A_RM_Set} = firstLM -> R15.Right_Many

{A_BM_Set} = fourthAssoc -> R16.Bottom_Many

{A_Assoc_Instance}  = thirdLM -> R15.LMRM_Assoc

No_In_BM_Set = countof {A_BM_Set}
No_In_Set    = countof {A_RM_Set}
No_In_Assoc  = countof {A_Assoc_Instance}

# Now check that the navigations can be performed
if No_In_Set    != 0 & \ 
   No_In_BM_Set != 0 & \   
   No_In_Assoc  != 0   \
then
   Has_Failed = FALSE
endif

#-------------------------------------------------------------------#
# Test complete
#-------------------------------------------------------------------#

if Has_Failed then
   [] = RPT3:Test_Failed["objLM", Test, -1]
else
   [] = RPT2:Test_Passed["objLM", Test, 0]
endif

#-------------------------------------------------------------------#