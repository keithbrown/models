define function  objIF1:do_if_test
input \
	Test_Start:Base_Integer_Type 
output \
	Final_Test:Base_Integer_Type 

#$DESCRIPTION
Object based function for performing 'if' tests. Tests simple logical expressions on Integer local variables and requires instance creation, attribute assignment.
#$END_DESCRIPTION


#------------------------------------------------------------------------#
# IF statement
# The ASL <if> statement shall be supported
# 1103-0000-01-0421
#
# The ASL <if ... else> statement shall be supported
# 1101-0000-01-0422
#------------------------------------------------------------------------#

# create an instance to remember to test results
newIF = create unique Object_IF with ResultA = 0 

Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Enter IF THEN stage of condition with an integer value
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping", "objIF", "IF test enter THEN stage"]
   [] = RPT5:Test_Text [Test, "The_First_Comment"]
   [] = RPT5:Test_Text [Test, "The_Second_Comment"]
   # Initialise temporary variable
   Temp = 1

   # Perform the test
   if Temp = 1 then
      newIF.ResultA = 10
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["objIF", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Enter ELSE stage of condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping", "objIF", "IF test enter ELSE stage"]

   # Initialise temporary variable
   Temp = 1

   # Perform the test
   if Temp = 2 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   else
      newIF.ResultA = 20

      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - IF-THEN, enter THEN part
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0421", "ASL Mapping", "objIF", "IF test enter THEN part"]

   Temp = 2

   # Check temporary variables values
   if Temp != 2 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   endif

   # Perform the test
   if Temp = 2 then
      newIF.ResultA = 30
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - IF-THEN statement where condition is unfulfilled
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0421", "ASL Mapping","objIF", "If test condition unfulfilled"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0422"]

   Temp = 2

   # Perform the test
   if Temp = 3 then
      Temp = 4              
      # This statement should not be entered
   endif

   # Check the results
   if Temp  = 4 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   else
      newIF.ResultA = 40
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - Boolean test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests TRUE 1"]

   A = TRUE
   B = TRUE

   if A = B then
      newIF.ResultA = 50
      [] = RPT2:Test_Passed["Boolean A = B TRUE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A = B TRUE", Test, -10]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - Boolean test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests TRUE 2"]

   A = TRUE

   if A then
      newIF.ResultA = 60
      [] = RPT2:Test_Passed["Boolean A TRUE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A TRUE", Test, -10]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Boolen test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 1"]

   A = TRUE
   B = FALSE

   if A != B then
      newIF.ResultA = 70
      [] = RPT2:Test_Passed["Boolean A != B FALSE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A != B FALSE", Test, -10]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8 - Should enter IF THEN Condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 2"]

   A = TRUE
   B = FALSE

   if !B then
      newIF.ResultA = 80
      [] = RPT2:Test_Passed["Boolean !B FALSE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean !B FALSE", Test, -10]
   endif

   Test = Test + 1

# Test 8

#------------------------------------------------------------------------#
# Test 9 - Boolean test should enter ELSE part of condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 3"]

   A = TRUE
   B = FALSE

   if !A then
      [] = RPT3:Test_Failed["Boolean !A TRUE", Test, -10]
   else
      newIF.ResultA = 90
      [] = RPT2:Test_Passed["Boolean !A TRUE", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 9

#------------------------------------------------------------------------#

Final_Test = Test

enddefine
