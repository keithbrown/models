//
// UK Crown Copyright (c) 2019. All rights reserved.
//

//! Simple Name and Type Linked Scenario
private service Struct::Simple_Name_and_Type_Linked_Scenario_4 () is
#--------------------------------------------------------------------------
# Setup Test Data
#
# TYPE LINKED Simple Structures
#--------------------------------------------------------------------------

My_Test_Data = find-one Test_Data

Test = My_Test_Data.The_Test_Number

#-------------------------------------------------------------------------- 
# Test 1 - Basic 'APPEND' operation tests
#          This test shall prove that a set is created empty.
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1241-0000-01-1212", "Structures", "Scenario", "Create empty NTL structure"]

   {NTL_Empty_Set} is Name_and_Type_Linked_Simple_Structure_Type

   Naught = countof {NTL_Empty_Set}

   if Naught = 0 then 
      [] = RPT2:Test_Passed["Scenario", Test, 0]
   else
      [] = RPT3:Test_Failed["Scenario", Test, Naught]
   endif

   Test = Test + 1

# End Test 1

#--------------------------------------------------------------------------
# Test 2 - Add some data into the set.
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1241-0000-01-1212", "Structures", "Scenario", "Add first NTL structure to set"]

   A_First_Local_Number  = 100
   A_First_Local_Real    = 100.0
   A_First_Local_String  = "Hello Good Evening and Welcome"
   A_First_Local_Boolean = TRUE

   append [A_First_Local_Number, A_First_Local_Real, A_First_Local_String, A_First_Local_Boolean] to {NTL_Empty_Set}

   One = countof {NTL_Empty_Set}

   if One = 1 then
      [] = RPT2:Test_Passed["Scenario", Test, One]
   else
      [] = RPT3:Test_Failed["Scenario", Test, One]
   endif

   Test = Test + 1

# End Test 2

#--------------------------------------------------------------------------
# Test 3 - Add some more data into the set.
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1241-0000-01-1212", "Structures", "Scenario", "Add second NTL structure to set"]

   A_Second_Local_Number  = 200
   A_Second_Local_Real    = 200.0
   A_Second_Local_String  = "Thankyou and Goodnight"
   A_Second_Local_Boolean = FALSE

   append [A_Second_Local_Number, A_Second_Local_Real, A_Second_Local_String, A_Second_Local_Boolean] to {NTL_Empty_Set}

   Two = countof {NTL_Empty_Set}

   if Two = 2 then
      [] = RPT2:Test_Passed["Scenario", Test, Two]
   else
      [] = RPT3:Test_Failed["Scenario", Test, Two]
   endif

   Test = Test + 1

# End Test 3

#--------------------------------------------------------------------------
# Test 4 - Read the data back
#          The Queue is implemented as a FIFO, so read it back as such.
#          This test will need to change should this implementation ever
#          change. This test will fail if this happens.
#--------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1241-0000-01-1212", "Structures", "Scenario", "Read back TL structure from set"]

   Counter = 1
   Local_Test_Passed = FALSE

   for [A_Read_Number, A_Read_Real, A_Read_String, A_Read_Boolean] in {NTL_Empty_Set} do

      if Counter = 1 and A_Read_Number  = A_First_Local_Number  and \
                         A_Read_Real    = A_First_Local_Real    and \
                         A_Read_String  = A_First_Local_String  and \
                         A_Read_Boolean = A_First_Local_Boolean then

         Local_Test_Passed = TRUE
      else

         if Counter = 2 and A_Read_Number  = A_Second_Local_Number  and \
                            A_Read_Real    = A_Second_Local_Real    and \
                            A_Read_String  = A_Second_Local_String  and \
                            A_Read_Boolean = A_Second_Local_Boolean and \
                            Local_Test_Passed = TRUE then

            [] = RPT2:Test_Passed["Scenario", Test, A_Read_Number]
         else
            [] = RPT3:Test_Failed["Scenario", Test, A_Read_Number]
         endif

      endif

      Counter = Counter + 1

   endfor

   Test = Test + 1

# End Test 4

#--------------------------------------------------------------------------
# Test 5 - Read the data back again
#          Prove that reading a set of structures does not change it
#--------------------------------------------------------------------------
      
   [] = RPT1:Start_Test[Test, "1241-0000-01-1212", "Structures", "Scenario", "Prove non-destructive read"]

   Local_Test_Passed = FALSE

   How_Many = countof {NTL_Empty_Set}

   if How_Many = 2 then
      Counter = 1

      for [A_Read_Number, A_Read_Real, A_Read_String, A_Read_Boolean] in {NTL_Empty_Set} do

         if Counter = 1 and A_Read_Number  = A_First_Local_Number and \
                            A_Read_Real    = A_First_Local_Real   and \
                            A_Read_String  = A_First_Local_String and \
                            A_Read_Boolean = A_First_Local_Boolean then

            Local_Test_Passed = TRUE
         else 

            if Counter = 2 and A_Read_Number  = A_Second_Local_Number  and \
                               A_Read_Real    = A_Second_Local_Real    and \
                               A_Read_String  = A_Second_Local_String  and \
                               A_Read_Boolean = A_Second_Local_Boolean and \
                               Local_Test_Passed = TRUE then

               [] = RPT2:Test_Passed["Scenario", Test, A_Read_Number]
            else
               [] = RPT3:Test_Failed["Scenario", Test, A_Read_Number]
            endif

         endif

         Counter = Counter + 1

      endfor

   else
      [] = RPT3:Test_Failed["Scenario", Test, How_Many]
   endif

   Test = Test + 1

# End Test 5

#--------------------------------------------------------------------------
# Test 6 - Call object based synch service to create a data structure, 
#          return it and then confirm that it was created correctly.
#          This test creates a new return list for each test, so the 
#          structure is always empty when we start.
#--------------------------------------------------------------------------

   A_Real_Number = 1.0
   
   # Create a new structure object.
   {NTL_Returned_Simple_Structure_1} is Name_and_Type_Linked_Simple_Structure_Type

   struct_1 = create Structured_Object with Reference_SO  = Test                    &\
                                            Some_Text     = "Construct a structure" &\
                                            An_Integer    = Test                    &\
                                            A_Real        = A_Real_Number           &\
                                            A_Boolean     = TRUE                    &\
                                            A_Colour      = 'Blue'                  &\
                                            Current_State = 'Idle'

   [{NTL_Returned_Simple_Structure_1}] = SO7:Create_Simple_NTL_Structure[Test, struct_1]

   Test = Test + 1

   [] = SO8:Decode_Simple_NTL_Structure[Test, {NTL_Returned_Simple_Structure_1}, struct_1, FALSE]

   delete struct_1

   Test = Test + 1

# End Test 6

#--------------------------------------------------------------------------
# Test 7 - Call object based synch service to create a data structure, 
#          return it and then confirm that it was created correctly.
#          This test uses the same return parameter for all tests, so the 
#          results are appended on to the old return structure.
#
#          This test will examine what happens when an emptied set is 
#          reused.
#          The set will be emptied by the Decode_Simple_Structure service, 
#          and then written to again by the next iteration of the 
#          Create_Simple_Structure.
#
#          It is understood that reading the final entry from a set will 
#          cause that set to be deleted. Subsequent appends to that set will 
#          cause a fatal crash.
#
#          To avoid this, ensure that the final entry of a set is never read
#          from.
#          This will prove that a set may be written to again after it has 
#          been partially read from.
#--------------------------------------------------------------------------

   Termination_Condition = Test + 10

   A_Real_Number = 1.0

   {NTL_Returned_Simple_Structure_2} is Name_and_Type_Linked_Simple_Structure_Type

   loop

      # Create a couple of structured objects
      struct_2 = create Structured_Object with Reference_SO  = Test                    &\
                                               Some_Text     = "Construct a structure" &\
                                               An_Integer    = Test                    &\
                                               A_Real        = A_Real_Number           &\
                                               A_Boolean     = FALSE                   &\
                                               A_Colour      = 'Blue'                  &\
                                               Current_State = 'Idle'

      a_structured_instance_2 = find-one Structured_Object where Reference_SO = Test

      # Create a new structure object each time, otherwise the same
      # structure will be appended to each iteration.

      [{NTL_Returned_Simple_Structure_2}] = SO7:Create_Simple_NTL_Structure[Test, a_structured_instance_2]

      Test = Test + 1
  
      [] = SO8:Decode_Simple_NTL_Structure[Test, \
                                           {NTL_Returned_Simple_Structure_2},\
                                           a_structured_instance_2, \
                                           TRUE]

      # Delete the object now we've done with it.
      delete a_structured_instance_2

      Test = Test + 1

      breakif Test = Termination_Condition

   endloop

# End Test 7

#--------------------------------------------------------------------------
# Test 8 - Define a test which passes a single structure to an instance 
#          through a generated event.
#--------------------------------------------------------------------------

   A_Real_Number = 1.0

   struct_3 = create Structured_Object with Reference_SO  = Test                        &\
                                            Some_Text     = "generate simple structure" &\
                                            An_Integer    = Test                        &\
                                            A_Real        = A_Real_Number               &\
                                            A_Boolean     = FALSE                       &\
                                            A_Colour      = 'Blue'                      &\
                                            Current_State = 'Idle'

   # Create a simple structure and pass it in to the instance Simple_F1
   {NTL_Simple_Object_Structure_3} is Name_and_Type_Linked_Simple_Structure_Type

   append [struct_3.Reference_SO, \
           struct_3.A_Real,       \
           struct_3.Some_Text,    \ 
           struct_3.A_Boolean] to {NTL_Simple_Object_Structure_3}

   generate SO6:Start_NTL_Simple(Test, {NTL_Simple_Object_Structure_3} ) to struct_3

   Test = Test + 1

# End Test 8

#--------------------------------------------------------------------------
# Test 9 - Perform the same test again, except this time use a set of 
#          structures with more than one set in it.
#--------------------------------------------------------------------------

   A_Real_Number = 1.0

   struct_4 = create Structured_Object with Reference_SO  = Test                        &\
                                            Some_Text     = "generate simple structure" &\
                                            An_Integer    = Test                        &\
                                            A_Real        = A_Real_Number               &\
                                            A_Boolean     = FALSE                       &\
                                            A_Colour      = 'Blue'                      &\ 
                                            Current_State = 'Idle'

   {NTL_Simple_Object_Structure_4} is Name_and_Type_Linked_Simple_Structure_Type

   Termination_Condition = 10
   Counter = 0

   loop
      append [struct_4.An_Integer, \
              struct_4.A_Real,     \
              struct_4.Some_Text,   \
              struct_4.A_Boolean] to {NTL_Simple_Object_Structure_4}

      Counter = Counter + 1

      breakif Counter = Termination_Condition

   endloop

   generate SO6:Start_NTL_Simple(Test, {NTL_Simple_Object_Structure_4} ) to struct_4

   Test = Test + 1

# End Test 9

#--------------------------------------------------------------------------
# Test 10 - Pass in the simple structure into a domain based synchronous 
#           service.
#--------------------------------------------------------------------------

   struct_5 = create Structured_Object with Reference_SO  = Test                         &\
                                            Some_Text     = "Domain based synch service" &\
                                            An_Integer    = Test                         &\
                                            A_Real        = 2.0                          &\
                                            A_Boolean     = TRUE                         &\
                                            A_Colour      = 'Blue'                       &\
                                            Current_State = 'Idle'

   {NTL_Simple_Object_Structure_5} is Name_and_Type_Linked_Simple_Structure_Type

   Termination_Condition = 10
   Counter = 1

   loop
      append [struct_5.An_Integer, \
              struct_5.A_Real,     \
              struct_5.Some_Text,  \
              struct_5.A_Boolean] to {NTL_Simple_Object_Structure_5}

      Counter = Counter + 1

      breakif Termination_Condition = Counter

   endloop

   # Invoke domain based synch. service
   [] = Struct6::Decode_Simple_NTL_Structure[Test,\
                                            {NTL_Simple_Object_Structure_5},           \
                                            struct_5] 

   delete struct_5

# End Test 10

#--------------------------------------------------------------------------

Test = Test + 1

My_Test_Data.The_Test_Number = Test