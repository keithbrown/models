//
// UK Crown Copyright (c) 2019. All rights reserved.
//

public service Relationships::Left_Many.Left_Many_Navigation (Iteration : in  integer,
                                                              Test      : in  integer) is
#-------------------------------------------------------------------#
#
# Normal navigation
#
# The architecture shall implement  simple 1:M relationships
# 1241-0000-01-0602
#
# The architecture shall implement associative 1-M:M relationships
# 1241-0000-01-0610
# 
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return single
# handle of the related instance
# 1241-0000-01-0701
#
# The architecture shall provide operations which, given a starting  
# instance handle and a relationship specification, return a set of
# handles of the related instance
# 1241-0000-01-0702
#
# The architecture shall support chains of navigations expressed in 
# ASL 
# 1241-0000-01-0704
# 
# The architecture shall support navigations to associative objects
# expressed in ASL
# 1241-0000-01-0706
#
# The architecture shall support navigations from singly associative
# objects expressed in ASL
# 1241-0000-01-0707
#
# The architecture shall support a translation of the ASL navigate
# statment to map to the mechanism that allows the traversal of
# relationship links
# 1241-0000-01-1205
#
#-------------------------------------------------------------------#

# Initialise the variables
Has_Failed   = FALSE
Failure_Code = 0
Supported    = TRUE

#-------------------------------------------------------------------#

# Find the desired instances for Left ManyObject
firstLM    = find-one Left_Many where idLM = 1
secondLM   = find-one Left_Many where idLM = 2
thirdLM    = find-one Left_Many where idLM = 3
tenthLM    = find-one Left_Many where idLM = 10
eleventhLM = find-one Left_Many where idLM = 11
twelthLM   = find-one Left_Many where idLM = 12

# Find the desired instances for Right Many Object
firstRM     = find-one Right_Many where idRM = 1
secondRM    = find-one Right_Many where idRM = 2
thirdRM     = find-one Right_Many where idRM = 3
tenthRM     = find-one Right_Many where idRM = 10
eleventhRM  = find-one Right_Many where idRM = 11
twelthRM    = find-one Right_Many where idRM = 12

# Find the desired instances for Associative Object
secondAssoc   = find-one LMRM_Assoc where idLMRM = 2
thirdAssoc    = find-one LMRM_Assoc where idLMRM = 3
fourthAssoc   = find-one LMRM_Assoc where idLMRM = 4
fifthAssoc    = find-one LMRM_Assoc where idLMRM = 5
eighthAssoc   = find-one LMRM_Assoc where idLMRM = 8
ninthAssoc    = find-one LMRM_Assoc where idLMRM = 9
tenthAssoc    = find-one LMRM_Assoc where idLMRM = 10
eleventhAssoc = find-one LMRM_Assoc where idLMRM = 11
twelthAssoc   = find-one LMRM_Assoc where idLMRM = 12

# Find the desired instances for Bottom Object
firstBM  = find-one Bottom_Many where idBM = 1
thirdBM  = find-one Bottom_Many where idBM = 3
fourthBM = find-one Bottom_Many where idBM = 4
fifthBM  = find-one Bottom_Many where idBM = 5
tenthBM  = find-one Bottom_Many where idBM = 10

#-------------------------------------------------------------------#
# Test 1 - Navigate from left many to associative object
#-------------------------------------------------------------------#

   if Iteration = 1 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Nav from Left Many to Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = secondLM -> R15.LMRM_Assoc

      if countof {SetAssoc} = 0 then
         Has_Failed = TRUE
      else

         for InstAssoc in {SetAssoc} do

            if InstAssoc.idLMRM != 5 then
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         endfor

      endif

   endif

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Navigate from the associative object to the bottom object
#-------------------------------------------------------------------#

   if Iteration = 2 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0707", "Relationships", "objLM", "Assoc object to Bottom Object"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetBM} = thirdAssoc -> R16.Bottom_Many

      if countof {SetBM} != 2 then
         Has_Failed = TRUE
      else
  
         Val1 = -10
         Val2 = -20

         for InstBM in {SetBM} do
 
            if InstBM.idBM = 1 then
               Val1 = InstBM.idBM   
            endif

            if InstBM.idBM = 5 then
               Val2 = InstBM.idBM
            endif

         endfor

         if Val1 = 1 then

            if Val2 != 5 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      endif

   endif

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Chained navigation from object BM to associative obejct 
#          then to object RM
#-------------------------------------------------------------------#

   if Iteration = 3 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjRM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstRM = firstBM -> R16.LMRM_Assoc -> R15.Right_Many

      if InstRM.idRM != 1 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Chained navigation from object BM to associative object 
#          to object LM
#-------------------------------------------------------------------#

   if Iteration = 4 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "ObjBM to Assoc to ObjLM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0632"]

      InstLM = firstBM -> R16.LMRM_Assoc -> R15.Left_Many

      if InstLM.idLM != 3 then
         Has_Failed   = TRUE
         Failure_Code = -10
      endif

   endif

# End Test 4

#-------------------------------------------------------------------#
# Test 5 - Full navigation
#-------------------------------------------------------------------#

   if Iteration = 5 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0704", "Relationships", "objLM", "Full navigation"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0706"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetRM} = secondLM -> R15.LMRM_Assoc -> R16.Bottom_Many -> R16.LMRM_Assoc -> R15.Right_Many

      if countof {SetRM} != 1 then
         Has_Failed   = TRUE
         Failure_Code = countof {SetRM}
      endif

   endif

# End Test 5

#-------------------------------------------------------------------#
# Test 6 - Correlated associative navigation
#-------------------------------------------------------------------#

   if Iteration = 6 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "Correlated Assoc"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0701"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = firstLM -> R15.LMRM_Assoc
      {Assoc2} = firstRM -> R15.LMRM_Assoc
      {SetRM}  = firstLM -> R15.Right_Many

      FirstInstFound  = FALSE
      SecondInstFound = FALSE
      ThirdInstFound  = FALSE

      for RMInst in {SetRM} do

         if RMInst.idRM = 1 then
            FirstInstFound = TRUE

            for InstAssoc1 in {Assoc1} do

               if InstAssoc1.idLMRM = 2 then
                  SecondInstFound = TRUE
  
                  for InstAssoc2 in {Assoc2} do      

                     if InstAssoc2.idLMRM = 2 then
                        ThirdInstFound = TRUE
                        InstAssoc = firstLM and firstRM -> R15.LMRM_Assoc
                     endif

                  endfor

               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if ThirdInstFound then
            
               if InstAssoc != UNDEFINED then

                  if InstAssoc.idLMRM != 2 then
                     Has_Failed = TRUE
                     Failure_Code = InstAssoc.idLMRM
                  endif

               else
                  Has_Failed = TRUE
                  Failure_Code = -20
               endif

            else
               Has_Failed = TRUE
               Failure_Code  = -30
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -50
      endif

   endif

# End Test 6

#-------------------------------------------------------------------#
# Test 7 - Navigate from the first instance of the right object to 
#          the associative object to return a set
#-------------------------------------------------------------------#

   if Iteration = 7 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {SetAssoc} = firstRM -> R15.LMRM_Assoc
            
      if countof{SetAssoc} = 2 then

         Val1 = -10
         Val2 = -20

         for InstAssoc in {SetAssoc} do
   
            if InstAssoc.idLMRM = 2 then
               Val1 = InstAssoc.idLMRM
            endif

            if InstAssoc.idLMRM = 4 then
               Val2 = InstAssoc.idLMRM
            endif

         endfor

         if Val1 = 2 then

            if Val2 !=  4 then
               Has_Failed   = TRUE
               Failure_Code = Val2
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = Val1
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif     

   endif

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Correlated associative navigation from first instance of 
#          the left many object and the first instance of the right
#          many object to the associative object and then to the
#          bottom many object
#
#          N.B. Correlated associative navigation cannot form part of
#          chained navigation
#-------------------------------------------------------------------#

   if Iteration = 8 then

      [] = RPT1:Start_Test[Test, "1241-0000-01-0706", "Relationships", "objLM", "ObjRM and Obj LM to Assoc to ObjBM"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0602"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0610"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0702"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0707"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-0704"]
      [] = RPT8:Specify_Requid[Test, "1241-0000-01-1205"]
      [] = RPT8:Specify_Requid [Test, "1103-0000-01-0631"]

      {Assoc1} = tenthLM -> R15.LMRM_Assoc
      {Assoc2} = tenthRM -> R15.LMRM_Assoc

      FirstInstFound = FALSE
      SecondInstFound = FALSE

      for AssocInst1 in {Assoc1} do

         if AssocInst1.idLMRM = 10 then
            FirstInstFound = TRUE

            for AssocInst2 in {Assoc2} do

               if AssocInst2.idLMRM = 10 then
                  SecondInstFound = TRUE      
                  InstAssoc = tenthLM and tenthRM -> R15.LMRM_Assoc       
               endif

            endfor

         endif

      endfor

      if FirstInstFound then

         if SecondInstFound then

            if InstAssoc != UNDEFINED then

               {SetBM} = InstAssoc -> R16.Bottom_Many
                  
               if countof{SetBM} != 1 then
                  Has_Failed = TRUE
                  Failure_Code = -10
               else

                  for InstBM in {SetBM} do

                     if InstBM.idBM != 10 then
                        Has_Failed   = TRUE
                        Failure_Code = InstBM.idBM
                     endif

                  endfor
           
               endif

            else
               Has_Failed = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   endif

# End Test 8

#-------------------------------------------------------------------#
# Test 9 - Perform correlated associative navigation from the 11th
#          instance of the Left Many object and the 11th instance of
#          the Right Many object to the 8th instance of the 
#          Associative object
#-------------------------------------------------------------------#

   if Iteration = 9 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = eleventhLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 8 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Perform correlated associative navigation from the 10th
#           instance of the Left Many object and the 11th instance of
#           Right MAny object to the 11th instance of the Associative
#           object
#-------------------------------------------------------------------#

   if Iteration = 10 then
      
      Failure_Code = 0

      [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objLM", "Correlated"]

      InstAssoc = tenthLM and eleventhRM -> R15.LMRM_Assoc

      if InstAssoc != UNDEFINED then

         if InstAssoc.idLMRM != 11 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      endif

   endif

# End Test 10

#-------------------------------------------------------------------#
# Report start of the test
#-------------------------------------------------------------------#

if Supported = TRUE then

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objLM", Test, 0]
   else
      [] = RPT3:Test_Failed["objLM", Test, Failure_Code]
   endif

else
   [] = RPT4:Test_Unsupported[Test]
endif

#-------------------------------------------------------------------#
