define scenario  Relationships_Scenario8
input
output

#$DESCRIPTION
One to One Tests
#$END_DESCRIPTION

#-------------------------------------------------------------------#
#
# Perform relationships tests for 1c:1c navigation
# 
# The architecture shall support the creation of new object instances
# at application start and during execution
# 1241-0000-01-0101
#
# The mapping shall be provided for the ASL create statment, 
# including the extension which allows some or all atributes to be 
# specified
# 1241-0000-01-0102
#
# The architecture shall support the specification of initial 
# relationship instance populations in scenario files
# 1241-0000-01-0620
#
#-------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test = my_test.The_Test_Number

   Has_Failed = FALSE

#-------------------------------------------------------------------#
# Create a few instances of Objects A, B and M
#-------------------------------------------------------------------#

   Count = 5

   loop

      # Object_A
      newA  = create Object_A  with idA = Count

      # Object_B
      newB  = create Object_B  with idB     = Count &\
                                    ResultA = 0

      # Object_M
      newM  = create Object_M  with idM = Count

      Count = Count - 1
      breakif Count = 0

   endloop

#-------------------------------------------------------------------#
# Test that the objects have been correctly created
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0101", "Relationships", "objB", "Object Instance Creation"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0102"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0620"]

   {SetA} = find-all Object_A
   {SetB} = find-all Object_B
   {SetM} = find-all Object_M

   if countof {SetA} = 5 then

      if countof {SetB} = 5 then

         if countof {SetM} != 5 then
            Has_Failed   = TRUE
            Failure_Code = -10
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -20
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -30
   endif

   if Has_Failed = FALSE then
      [] = RPT2:Test_Passed["objB", Test, 0]
   else
      [] = RPT3:Test_Failed["objB", Test, Failure_Code]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Create the relationships
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objB1:Create_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#
# Perform the navigation tests
#-------------------------------------------------------------------#

   Count = 1

   loop

      # Initiate the test
      [] = objB2:ObjB_Navigation[Count, Test]

      Count = Count + 1
      Test  = Test  + 1

      breakif Count = 15

   endloop

#-------------------------------------------------------------------#
# Delete the relationship tests
#-------------------------------------------------------------------#

   # Initiate the test
   [] = objB3:Delete_Relationships[Test]
   Test = Test + 1

#-------------------------------------------------------------------#

my_test.The_Test_Number = Test
enddefine
